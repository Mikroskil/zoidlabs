Bagian 1 - Pendahuluan

HTML5 adalah lompatan besar ke depan untuk pengembang web. Ini memberi kami semua jenis tag baru hip seperti <header> , <nav> dan <footer> . Hal ini juga memberi kami API JavaScript licin baru seperti drag dan drop, localStorage, dan geolocation. Namun, bagaimanapun, ada kekosongan yang HTML5 belum mengisi kekosongan dan yang benar-benar markup semantik.

Bayangkan bisa menandai sesuatu dengan cara yang Anda ingin menandainya up. Bayangkan mengubah <div id="wrapper"> untuk <wrapper> atau contoh yang lebih baik, membuat kalender seperti:

 <calendar> <month name= "January" > <day> 1 </day> <day> 2 </day> <day> 3 </day> <!-- ...and so on --> </month> </calendar> 

Bahkan lebih baik lagi, bagaimana akhirnya menambahkan dukungan untuk jenis baru media dengan hanya mengubah jenis media daripada harus datang dengan tag baru untuk itu seperti <img> , <embed> , <video> , <audio> , dan seterusnya? Misalnya, tidak akan menyenangkan untuk hanya cukup melakukan: <html:media src="my-audio-file.aac" type="aac"> dan membiarkan kesepakatan peramban dengan cara membuat itu?

Web bergerak menuju sebuah toko aplikasi raksasa dan kita harus menerimanya. Markup yang kita gunakan tidak harus bekerja melawan kita, itu harus bekerja untuk kita. Spec ini adalah untuk melakukan hal itu. Untuk akhirnya membebaskan aturan dan standar bodoh dan memberi kita, pengembang, kebebasan total untuk kode seperti yang kita tolong membawa web markup dibaca lebih semantik, bersih, dan manusia.

Sekarang, tanpa kata perpisahan lebih lanjut, izinkan saya memperkenalkan Anda untuk HTML6.
Bagian 2 - Konsep

HTML6 adalah HTML konseptual dengan XML seperti ruang nama. Jika Anda tidak tahu XML, atau tidak tahu apa ruang nama XML yang mereka pada dasarnya cara untuk memungkinkan Anda untuk menggunakan tag yang sama tanpa itu bertentangan dengan tag yang berbeda. Anda mungkin pernah benar-benar melihat satu sebelum di DOCTYPE XHTML: xmlns:xhtml="http://www.w3.org/1999/xhtml"

Dalam HTML6 kita mengambil keuntungan dari konsep cerdik ini dengan memberikan kita kebebasan untuk menggunakan tag apapun yang kita inginkan dengan W3C pemesanan ruang nama dan tidak tag. W3C pada dasarnya akan berhak untuk semua ruang nama, dan setiap namespace mereka cadangan akan memicu HTML API yang berbeda.

Jadi, apa ini terlihat seperti? Berikut adalah contoh dari dokumen lengkap HTML6. Kami akan pergi ke setiap tag dan atribut di bagian API.

 <!DOCTYPE html> <html:html> <html:head> <html:title> HTML6 Sample </html:title> <html:meta type= "title" value= "Page Title" > <html:meta type= "description" value= "This is an example of HTML with namespaces" > <html:link src= "css/main.css" title= "Main Styles" type= "text/css" > <html:link src= "js/main.js" title= "Main Script" type= "text/javascript" > </html:head> <html:body> <header> <logo> <html:media type= "image" src= "images/logo.png" > </logo> <nav> <html:a href= "/cats" > Cats </a> <html:a href= "/dogs" > Dogs </a> <html:a href= "/rain" > Rain </a> </nav> </header> <content> <article> <h1> This is my main article head </h1> <h2> This is my sub head </h2> <p> [...] </p> <p> [...] </p> </article> <article> <h1> A cool video! </h1> <h2> Pay attetion to the media elements </h2> <p> [...] </p> <html:media type= "video" src= "vids/funny-cat.mp4" autostart controls > <p> Man, that was a stupid cat. </p> </article> </content> <footer> <copyright> This site is &copy; to Oscar Godson 2009 </copyright> </footer> </html:body> </html:html> 

Seperti yang akan Anda lihat, ada beberapa aneh <html:x> tag seluruh sampel ini. Mereka adalah elemen namespaced milik W3C dan HTML6 spec. Unsur-unsur ini memicu peristiwa browser. Sebagai contoh, <html:media type="image"> elemen akan membuat gambar muncul atau, dengan <html:title> elemen membuat bar judul perubahan Browser dan sebagainya.

Semua unsur-unsur lain yang hanya untuk Anda. Tak satu pun dari elemen-elemen berarti apa-apa ke browser. Mereka hanya kait untuk CSS dan JS dan untuk membuat kode Anda lebih semantik. Elemen HTML Anda lihat di sana seperti <p> atau <h1> tag hanya karena saya suka menggunakan mereka sebagai cara untuk markup paragraf atau header yang paling penting, tapi saya bisa menggunakan <paragraph> , <text> , atau <helloworldanythingiwant> .

Ini pun masuk akal untuk Anda dan aplikasi Anda.
Bagian 3 - The API
Bagian 3A - HTML API

Semua tag berikut dalam API ini memiliki namespace html seperti: <html:title>
<html:html>

Ini dimulai dokumen HTML. Equivelent untuk saat ini <html> tag.

Contoh:

 <!DOCTYPE html> <html:html> <!-- rest of HTML would go here --> </html:html> 

<html:head>

Ini dimulai kepala HTML ini. Equivelent untuk saat ini <html> tag. Tag berisi data yang tidak benar-benar ditampilkan (selain dari <html:title> yang ditampilkan di jendela browser). Sebaliknya, tujuan itu adalah untuk mendapatkan data dan skrip yang mempengaruhi tampilan dari konten dalam <html:body> . Ini script dan sumber-sumber lain mencakup hal-hal seperti JavaScript, CSS, RSS feed, dll

Contoh:

 <!DOCTYPE html> <html:html> <html:head> <!-- Head content here, like the <html:title> tag --> </html:head> </html:html> 

<html:title>

Ini adalah judul dari dokumen HTML. Setara dengan saat ini <title> tag. Browser akan menggunakan ini untuk tab bar, favorit, dll dan mesin pencari akan menggunakan ini sebagai judul link mereka

Contoh:

 <!DOCTYPE html> <html:html> <html:head> <html:title> HTML6 Spec Version 0.1 </html:title> </html:head> </html:html> 

<html:meta>

Ini adalah sedikit berbeda maka versi HTML saat ini. Meta data di HTML6 bisa apa saja. Tidak seperti HTML sekarang, tidak ada jenis meta yang diperlukan atau non-standar. Ini digunakan untuk menyimpan konten untuk Anda sebagai pengembang, atau situs lain sebagai cara untuk mengambil informasi seperti deskripsi halaman.

Contoh:

 <!DOCTYPE html> <html:html> <html:head> <html:title> HTML6 Spec Version 0.1 </html:title> <html:meta type= "description" value= "This is an example of HTML with namespaces" > </html:head> </html:html> 

<html:link>

Ini link dokumen eksternal dan skrip seperti CSS, JavaScript, RSS, Favicons, dll untuk dokumen saat. Setara dengan saat ini <link> tag. Tag ini mengambil atribut berikut:

    charset : The pengkodean karakter seperti "UTF-8".
    href : Link ke file sumber.
    media : Jenis perangkat item harus berjalan pada, misalnya, "mobile" atau "tablet".
    type : Jenis MIME dokumen, misalnya, text/javascript . 

Contoh:

 <!DOCTYPE html> <html:html> <html:head> <html:title> HTML6 Spec Version 0.1 </html:title> <html:link src= "js/main.js" title= "Main Script" type= "text/javascript" > </html:head> </html:html> 

<html:body>

Ini adalah tubuh dokumen HTML. Setara dengan saat ini <body> tag. Ini adalah di mana Anda akan menempatkan sebagian besar barang yang akan terlihat oleh pengguna seperti teks, media, dan sebagainya.

Contoh:

 <!DOCTYPE html> <html:html> <html:head> <html:title> HTML6 Spec Version 0.1 </html:title> </html:head> <html:body> <!-- Your web page's content would go here --> </html:body> </html:html> 

<html:a>

Tag ini merupakan salah satu anchor pada halaman, atau link ke halaman web lain. Setara dengan saat <a> tag. The <html:a> tag mengambil satu atribut yang diperlukan yang merupakan href yang mengarahkan jangkar atau link ke mana harus pergi. Untuk anchor Anda akan menggunakan sintaks #id-of-element-to-link-to dan untuk link ke halaman web lain Anda akan cukup memasukkan link seperti http://google.com .

Atribut tersedia untuk <a> tag adalah:

    href
    name
    target (bisa blank , parent , top atau self ) 

Contoh:

 <!DOCTYPE html> <html:html> <html:head> <html:title> HTML6 Spec Version 0.1 </html:title> </html:head> <html:body> <html:a href= "http://google.com" > Go to google.com! </html:a> </html:body> </html:html> 

<html:button>

Mirip dengan <button> atau <input type="button"> di HTML <= 5, yang <html:button> tag memungkinkan Anda untuk membuat tombol untuk interaksi pengguna pada halaman.

Atribut tersedia untuk <html:button> tag adalah:

    disabled

 <!DOCTYPE html> <html:html> <html:head> <html:title> HTML6 Spec Version 0.1 </html:title> </html:head> <html:body> <html:button> Push me! </html:button> </html:body> </html:html> 

<html:media>

Tag ini merangkum apa yang sekarang kita miliki untuk media yang tag seperti <img> , <video> , <audio> , <embed> , dan sebagainya. Alih-alih tag untuk setiap jenis file, browser hanya akan tahu bagaimana menjalankannya dengan type atribut, atau akan membuat menebak berdasarkan ekstensi file, atau yang terakhir, dengan jenis MIME.

Contoh:

 <!DOCTYPE html> <html:html> <html:head> <html:title> HTML6 Spec Version 0.1 </html:title> </html:head> <html:body> <!-- Image --> <html:media src= "images/logo.jpg" type= "image" > <!-- Video, shows you don't "need" a type --> <html:media src= "videos/cute-cat.mov" > <!-- Some made up format, browser will ignore if it doesn't know it --> <html:media src= "misc/example.abc" type= "abc" > </html:body> </html:html> 

Bagian 3B - HTML Forms API

Bentuk HTML terpisah dari HTML API untuk memungkinkan pengembangan bentuk untuk tidak harus memperlambat untuk HTML seluruh spec. Bentuk senantiasa berkembang dengan Sliders, pemetik warna, tanggal dan waktu pemetik, progress bar dan banyak lagi. Bentuk benar-benar semacam mereka sendiri "hal" dalam HTML, sehingga dalam HTML6 kita sudah rusak mereka ke API mereka sendiri.
<form:form>

Tag ini menciptakan bentuk baru. Memiliki dua atribut, method dan action . Seperti bentuk HTML saat ini, metode dapat POST atau GET (mereka dapat huruf kecil juga) dan akan mengirim formulir dengan itu sebagai header HTTP. Rincian lebih lanjut tentang GET dan POST dapat ditemukan di W3.org. The action atribut mengatakan bentuk di mana untuk mengirim data. Secara default "metode" diatur ke GET dan "tindakan" adalah halaman saat ini.

Contoh:

 <!DOCTYPE html> <html:html> <html:head> <html:title> HTML6 Spec Version 0.1 </html:title> </html:head> <html:body> <form:form method= "post" action= "/sendmail" > <!-- Form inputs and stuff go here --> </form:form> </html:body> </html:html> 

<form:input>

Tag ini menciptakan bentuk masukan baru. Setiap jenis bentuk masukan yang dapat Anda memasukkan teks ke akan menjadi masukan. Dalam HTML saat ini mencakup segala sesuatu dari input teks tua polos ke <textarea> dan juga akan mencakup HTML5 gaya untuk input seperti email dan url . Daftar lengkap mungkin jenis masukan adalah:

    text
    email
    url
    tel
    search
    number
    datetime
    date
    month
    week
    time
    datetime-local
    textarea
    password
    file - ( multiple ) 

Mungkin atribut pada input adalah:

    name
    disabled
    readonly
    placeholder
    autofocus
    required
    novalidate

Berikut ini adalah atribut yang akan bekerja pada masukan apapun kecuali masukan berkas:

    maxlength
    autocomplete
    pattern
    spellcheck
    match - ini adalah baru untuk HTML6, memberikan nama bidang yang Anda inginkan untuk meminta pertandingan di. 

Contoh:

 <!DOCTYPE html> <html:html> <html:head> <html:title> HTML6 Spec Version 0.1 </html:title> </html:head> <html:body> <form:form method= "post" action= "/sendmail" > <!-- Simple input (defaults to text) --> <form:input> <!-- A new HTML6 match example --> <form:input type= "password" name= "user_password" > <form:input type= "password" match= "user_password" > <!-- Advanced example --> <form:input type= "email" placeholder= "user@site.com" autofocus required > </form:form> </html:body> </html:html> 

<form:select>

The <form:select> tag memungkinkan pengguna memilih dari pilihan daripada masukan apapun. Misalnya HTML <= 5 <select> akan dekat dengan sama. Beberapa orang lain akan menjadi kalender, color picker, dan berbagai karena ini adalah nilai-nilai yang telah ditetapkan di mana Anda pilih.

Jenis masukan yang mungkin mengikuti bersama dengan atribut yang khusus untuk itu:

    select - ( multiple )
    color
    calendar - ( range )
    meter - ( range , step ) 

Atribut yang bekerja untuk semua jenis pilih adalah:

    name
    readonly
    disabled
    required
    autofocus

Contoh:

 <!DOCTYPE html> <html:html> <html:head> <html:title> HTML6 Spec Version 0.1 </html:title> </html:head> <html:body> <form:form method= "post" action= "/scheduler" > <!-- Normal select --> <html:select type= "select" name= "favorite_color" > <!-- Calendar example --> <html:select type= "calendar" name= "the_calendar" range= "10/10/10-10/10/11" > </form:form> </html:body> </html:html> 

<form:status>

The <form:status> tag memungkinkan Anda untuk memberikan umpan balik, atau "status" update untuk pengguna Anda. Berguna untuk meng-upload progress bar atau langkah-langkah dalam bentuk multi-halaman, misalnya. Ini adalah sama dengan <progress> dan <meter> elemen di HTML5.

    progress
    meter

Atribut yang bekerja untuk semua jenis Status adalah:

    min
    max
    value

Contoh:

 <!DOCTYPE html> <html:html> <html:head> <html:title> HTML6 Spec Version 0.1 </html:title> </html:head> <html:body> <form:form method= "post" action= "/upload" > <!-- Example showing "steps" in a form --> <form:status type= "meter" min= "1" max= "3" value= "2" > <message> You're currently on step 2 of 3 </message> <!-- Example showing an upload progress bar --> <form:status type= "progress" max= "100" value= "25" > </form:form> </html:body> </html:html> 

<form:label>

The <form:label> tag memungkinkan Anda untuk label input bagi pengguna. Ini link teks untuk input dan ketika klik akan fokus pada input yang terhubung. Ini sesuai dengan label for atribut ke id dari setiap elemen form.

Atribut pekerjaan yang untuk <form:label> tag adalah:

    for

Contoh:

 <!DOCTYPE html> <html:html> <html:head> <html:title> HTML6 Spec Version 0.1 </html:title> </html:head> <html:body> <form:form method= "post" action= "/login" > <form:label for= "username" > Username </form:label> <form:input id= "username" name= "username" > <form:label for= "password" > Password </form:label> <form:input id= "password" name= "password" type= "password" > </form:form> </html:body> </html:html> 

<form:submit>

Sama seperti <input type="submit"> di HTML <= 5, <form:submit> akan membuat tombol yang menyerahkan formulir Anda. Jika tombol kirim hadir dalam bentuk, menekan enter sementara difokuskan dalam bentuk akan mengirimkannya.

Atribut yang bekerja untuk <form:submit> tag adalah:

    name
    value

Contoh:

 <!DOCTYPE html> <html:html> <html:head> <html:title> HTML6 Spec Version 0.1 </html:title> </html:head> <html:body> <form:form method= "post" action= "/login" > <form:label> Login </form:label> <form:input name= "username" > <form:input name= "password" type= "password" > <form:submit name= "submit" value= "submit" > </form:form> </html:body> </html:html> 

Bagian 4 - jenis Tag

Dalam HTML6, seperti di semua versi HTML sebelumnya, ada dua jenis tag: tag tunggal dan tag ganda. Tag tunggal tidak dapat memiliki konten teks, mereka hanya memiliki atribut. Ini adalah contoh dari tag tunggal (kedua elemen ditafsirkan dengan cara yang sama):

 <html:meta type= "author" content= "m93a" > <html:meta type= "author" content= "m93a" /> 

Berbeda dengan tag ganda, tag tunggal tidak perlu ditutup. Tag ganda biasanya memiliki beberapa konten teks sehingga mereka terbuat dari pembuka dan tag penutup. Jika tidak memiliki konten teks, dapat disingkat menjadi single varian menutup diri. Contoh:

 <html:link href= "./a.html" > Text content </html:link> <!-- This shortand... --> <foo class= "bar" /> <!-- ...means in fact this: --> <foo class= "bar" ></foo> 

Bagian 5 - Menggunakan HTML6 Sekarang

Sayangnya Anda tidak bisa tapi aku bekerja keras pada polyfill yang akan mengubah dokumen HTML6 Anda menjadi dokumen HTML normal dengan JS. Akan ada front-end satu (yang saya tidak akan menggunakan produksi karena waktu pemrosesan dan karena mesin pencari tidak akan mengerti apa dokumen tersebut adalah) dan satu Node.js yang akan mengubahnya dan memberikannya kepada Browser seolah-olah itu HTML.

Jika Anda ingin itu dalam bahasa lain menyampaikannya kepada pelacak isu atau mengirim permintaan tarik .
Bagian 6 - Kesimpulan

Ini hanyalah sebuah ide. Ini ide saya pribadi selama bertahun-tahun , tapi itu sama sekali tidak selesai. Masih banyak yang hilang dan banyak yang saya belum memikirkan, tapi sebuah awal. Saya akan senang mendengar pengalaman anda di pelacak isu atau lebih baik lagi, mengirim permintaan tarik dari apa yang Anda pikir harus diubah atau ditambahkan. 